# Import required librariesimport pandas as pdimport dashimport dash_html_components as htmlimport dash_core_components as dccfrom dash.dependencies import Input, Outputimport plotly.express as px# Read the airline data into pandas dataframespacex_df = pd.read_csv("spacex_launch_dash.csv")max_payload = spacex_df['Payload Mass (kg)'].max()min_payload = spacex_df['Payload Mass (kg)'].min()# Create a dash applicationapp = dash.Dash(__name__)# Create an app layoutapp.layout = html.Div(children=[html.H1('SpaceX Launch Records Dashboard',                                        style={'textAlign': 'center', 'color': '#503D36',                                               'font-size': 40}),                                # TASK 1: Add a dropdown list to enable Launch Site selection                                # The default select value is for ALL sites                                # dcc.Dropdown(id='site-dropdown',...)                                                                dcc.Dropdown(                                    id='site-dropdown',                                    options=[                                        {'label': 'All Sites', 'value': 'ALL'},                                        {'label': 'CCAFS LC-40', 'value': 'CCAFS LC-40'},                                        {'label': 'CCAFS SLC-40', 'value': 'CCAFS SLC-40'},                                        {'label': 'KSC LC-39A', 'value': 'KSC LC-39A'},                                        {'label': 'VAFB SLC-4E', 'value': 'VAFB SLC-4E'},                                    ],                                    value='ALL',  # Default selected value                                    style={'width': '50%'}  # Adjust width as needed                                ),                                html.Br(),                                # TASK 2: Add a pie chart to show the total successful launches count for all sites                                # If a specific launch site was selected, show the Success vs. Failed counts for the site                                html.Div(dcc.Graph(id='success-pie-chart')),                                html.Br(),                                html.P("Payload range (Kg):"),                                # TASK 3: Add a slider to select payload range                                #dcc.RangeSlider(id='payload-slider',...)                                dcc.RangeSlider(id='payload-slider',                                                min=0, max=10000, step=1000,                                                marks={i: f'{i}' for i in range(0, 10000 + 1, 1000)},                                                value=[min_payload, max_payload]),                                # TASK 4: Add a scatter chart to show the correlation between payload and launch success                                html.Div(dcc.Graph(id='success-payload-scatter-chart')),                                ])# TASK 2:# Add a callback function for `site-dropdown` as input, `success-pie-chart` as output@app.callback(    Output('success-pie-chart', 'figure'),    Input('site-dropdown', 'value'))def generate_pie_chart(site):    if site == 'ALL':        # Show the number of class 1 for each Launch site        fig = px.pie(spacex_df[spacex_df['class'] == 1], names='Launch Site', title='Number of Class 1 for Each Launch Site')    elif site in spacex_df['Launch Site'].unique():        # Show the proportion of Class 1 and 0 for the selected Launch Site        selected_site_data = spacex_df[spacex_df['Launch Site'] == site]        fig = px.pie(selected_site_data, names='class', title=f'Proportion of Class 1 and 0 for {site}', labels={'1': 'Class 1', '0': 'Class 0'})    else:        # Handle the case where an invalid site is provided        fig = px.pie(title='Invalid Launch Site')    # Show the plot    return fig# TASK 4:# Add a callback function for `site-dropdown` and `payload-slider` as inputs, `success-payload-scatter-chart` as output@app.callback(    Output('success-payload-scatter-chart', 'figure'),    [Input('site-dropdown', 'value'), Input('payload-slider', 'value')])def update_scatter_chart(selected_site, payload_range):    # Filter DataFrame based on selected site and payload range    filtered_df = spacex_df.copy()    if selected_site != 'ALL':        filtered_df = filtered_df[filtered_df['Launch Site'] == selected_site]    filtered_df = filtered_df[(filtered_df['Payload Mass (kg)'] >= payload_range[0]) & (filtered_df['Payload Mass (kg)'] <= payload_range[1])]    # Create scatter plot    fig = px.scatter(        filtered_df,        x='Payload Mass (kg)',        y='class',        color='Booster Version Category',        title=f'Payload vs. Launch Outcome ({selected_site})',        range_x=[0, 10000],  # Set x-axis range based on payload values        range_y=[0, 2],    )    return fig# Run the appif __name__ == '__main__':    app.run_server()